# MSSS Selfcal Pipeline
#
# works on one single field
#

##### input parameters
! field_name               = H017+39
! input_directory          = /work/htb00/htb001/MSSS-input-data
! results_directory        = /work/htb00/htb001/MSSS-results

##### imaging parameters
! robust     = 0.
! npix       = 2048
# uvmax in klambda
! uvmax      = 3.
# cellsize with units
! cellsize   = 20.arcsec
# number of clean iterations for shallow cleaning
! niter_sh   = 2500
# number of clean iterations for deep cleaning
! niter_deep = 1000000
! wmax       = 5000.
! padding    = 1.0


##### pathes to the scripts etc.
! msss_find_data_script    = /homea/htb00/htb001/prefactor-msss/bin/MSSS-find-data.py
! fixinfo_script           = /homea/htb00/htb001/python-scripts/fixinfo/fixbeaminfo
! gsm_script               = /homea/htb00/htb001/prefactor-msss/bin/gsmMSSS.py
! MSSS_catalog_file        = /homea/htb00/htb001/MSSS-processing/mastercat_HBA_V0_nonfluxcor.xml
! calibration_parset       = /homea/htb00/htb001/prefactor-msss/parsets/phaseonly_modeCOMPLX.parset
! virtual_concat_script    = /homea/htb00/htb001/prefactor-msss/bin/virtual_concat.py
! awimager_executable      = /homea/htb00/htb003/lofar_jureca_2-15/bin/awimager
! make_clean_mask_script   = /homea/htb00/htb001/prefactor-msss/bin/make_clean_mask.py

##### performance parameters
# run so many IO-heavy processes on each node
! max_per_node_IO          =  4
# run so many awimager processes on each node
! max_imagers_per_node     =  3
! max_imager_threads       =  12

# set this to True at your own risk
! error_tolerance          =  False

pipeline.steps = [create_field_map, find_files, find_files_maps, fix_tile_info, gen_skymodel, expand_skymodel, calibrate_data, concat, expand_uvmin, awimage1]

# create a mapfile with the field name, len = 1
create_field_map.control.kind                     =  plugin
create_field_map.control.type                     =  addListMapfile
create_field_map.control.hosts                    =  ['localhost']
create_field_map.control.files                    =  [ {{ field_name }} ]
create_field_map.control.mapfile_dir              =  input.output.mapfile_dir
create_field_map.control.filename                 =  field_name.mapfile

# find all MS files for the field and do some simple computations, len = 1/many
find_files.control.type                           =  pythonplugin
find_files.control.executable                     =  {{ msss_find_data_script }}
find_files.argument.field_name                    =  create_field_map.output.mapfile
find_files.argument.input_directory               =  {{ input_directory }}
find_files.argument.mapfile_basename              =  find_files.datamap
find_files.argument.mapfile_dir                   =  input.output.mapfile_dir

# make mapfiles from find_files usable by the pipeline
find_files_maps.control.kind                      =  plugin
find_files_maps.control.type                      =  mapfilenamesFromMapfiles
find_files_maps.control.mapfile_groupedmap        =  find_files.output.groupedmap.mapfile
find_files_maps.control.mapfile_single_map        =  find_files.output.single_mapfile.mapfile
find_files_maps.control.mapfile_DEC               =  find_files.output.DEC.mapfile
find_files_maps.control.mapfile_RA                =  find_files.output.RA.mapfile
find_files_maps.control.mapfile_UVmin             =  find_files.output.UVmin.mapfile

# fix the tile-beam info
fix_tile_info.control.kind                        =  recipe
fix_tile_info.control.type                        =  executable_args
fix_tile_info.control.executable                  =  {{ fixinfo_script }}
fix_tile_info.control.max_per_node                =  {{ max_per_node_IO }}
fix_tile_info.control.mapfiles_in                 =  [ find_files_maps.output.single_map ]
fix_tile_info.control.inputkeys                   =  [ msin ]
fix_tile_info.argument.flags                      =  [ msin ]

# create the skymodel for calibration, len = 1
gen_skymodel.control.kind                         =  recipe
gen_skymodel.control.type                         =  executable_args
gen_skymodel.control.executable                   =  {{ gsm_script }}
gen_skymodel.control.mapfiles_in                  =  [ create_field_map.output.mapfile ]
gen_skymodel.control.inputkeys                    =  [ dummy ]
gen_skymodel.control.outputkey                    =  output_file
gen_skymodel.argument.flags                       =  [output_file, find_files_maps.output.RA, find_files_maps.output.DEC, {{ skymodel_radius }} ]
gen_skymodel.argument.cat                         =  {{ MSSS_catalog_file }}

# expand the skymodel to all files, len = nfiles
expand_skymodel.control.kind                      =  plugin
expand_skymodel.control.type                      =  expandMapfile
expand_skymodel.control.mapfile_in                =  gen_skymodel.output.mapfile
expand_skymodel.control.mapfile_to_match          =  find_files_maps.output.single_map
expand_skymodel.control.mapfile_dir               =  input.output.mapfile_dir
expand_skymodel.control.filename                  =  expand_skymodel.datamap

# calibrate the input-data (will modify in input files), len = nfiles
calibrate_data.control.type                       =  python-calibrate-stand-alone
calibrate_data.control.max_per_node               =  {{ max_per_node_IO }}
calibrate_data.control.error_tolerance            =  {{ error_tolerance }}
calibrate_data.control.opts.mapfiles_in           =  [find_files_maps.output.single_map,expand_skymodel.output.mapfile]
calibrate_data.control.opts.inputkeys             =  [msin,skymodel]
calibrate_data.argument.force                     =  True
calibrate_data.argument.observation               =  msin
calibrate_data.argument.parmdb-name               =  instrument_directionindependent
calibrate_data.argument.parset                    =  {{ calibration_parset }}
calibrate_data.argument.catalog                   =  skymodel

# virtual concat of MSs, length = nbands
concat.control.type                               =  pythonplugin
concat.control.executable                         =  {{ virtual_concat_script }}
concat.control.mapfile_in                         =  find_files_maps.output.groupedmap
concat.control.inputkey                           =  msfiles
concat.control.outputkey                          =  msconcat
concat.argument.flags                             =  [msfiles,msconcat]

# expand the skymodel to all files, len = nfiles
expand_uvmin.control.kind                         =  plugin
expand_uvmin.control.type                         =  expandMapfile
expand_uvmin.control.mapfile_in                   =  find_files_maps.output.UVmin
expand_uvmin.control.mapfile_to_match             =  concat.output.mapfile
expand_uvmin.control.mapfile_dir                  =  input.output.mapfile_dir
expand_uvmin.control.filename                     =  expand_uvmin.datamap

# first imaging with shallow cleaning, length = nbands
awimage1.control.kind                             =  recipe
awimage1.control.type                             =  executable_args
awimage1.control.executable                       =  {{ awimager_executable }}
awimage1.control.outputsuffixes                   =  [.model,.model.corr,.restored,.restored.corr,0.avgpb]
awimage1.control.outputkey                        =  image
awimage1.control.args_format                      =  lofar
awimage1.control.parsetasfile                     =  True
awimage1.control.max_per_node                     =  {{ max_imagers_per_node }}
awimage1.control.error_tolerance                  =  {{ error_tolerance }}
awimage1.control.mapfiles_in                      =  [concat.output.mapfile, expand_uvmin.output.mapfile]
awimage1.control.inputkeys                        =  [msin,uvmin]
awimage1.argument.ms                              =  msin
awimage1.argument.numthreads                      =  {{ max_imager_threads }}
awimage1.argument.cellsize                        =  {{ cellsize }}
awimage1.argument.npix                            =  {{ npix }}
awimage1.argument.niter                           =  {{ niter_sh }}
awimage1.argument.robust                          =  {{ robust }}
awimage1.argument.wmax                            =  {{ wmax }}
awimage1.argument.weight                          =  briggs
awimage1.argument.data                            =  CORRECTED_DATA
awimage1.argument.padding                         =  {{ padding }}
awimage1.argument.stokes                          =  I
awimage1.argument.operation                       =  mfclark
awimage1.argument.oversample                      =  5
awimage1.argument.cyclefactor                     =  1.5
awimage1.argument.gain                            =  0.1
awimage1.argument.timewindow                      =  300
awimage1.argument.ChanBlockSize                   =  2
awimage1.argument.ApplyElement                    =  0
awimage1.argument.UVmax                           =  {{ uvmax }}
awimage1.argument.UVmin                           =  uvmin

# make masks for the shallow images, length = nbands
mask.control.type                                =  pythonplugin
mask.control.executable                          =  {{ make_clean_mask_script }}
mask.control.max_per_node                        =  {{ max_imagers_per_node }}
mask.control.error_tolerance                     =  {{ error_tolerance }}
mask.control.mapfile_in                          =  
mask.control.inputkey                            =  imagefile
mask.control.outputkey                           =  maskfile
mask.argument.flags                              =  [imagefile,maskfile]
mask.argument.threshisl                          =  3.0
mask.argument.threshpix                          =  5.0
mask.argument.atrous_do                          =  True
mask.argument.rmsbox                             =  (150,50)
mask.argument.adaptive_rmsbox                    =  True
mask.argument.img_format                         =  fits
mask.argument.atrous_jmax                        =  3
mask.argument.trim_by                            =  0.1
